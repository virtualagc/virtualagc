#!/bin/bash
# Script for digital simulation of an AGC CPU.  The command-line arguments,
# all optional, appear in the following order:
#       MODEL           The AGC model.  In principle, only 1003565, 1003700,
#                       2003100, 2003200, or 2003993.  Presently, only
#                       2003200 or 2003993.  Defaults to 2003993, if missing
#                       or "".
#       SOFTWARE        AGC software to run on the simulated CPU.  Defaults
#                       to "Validation-hardware-simulation" if missing or "".
#       VERILOGPARMS    Parameters for iverilog compilation.  Multiple 
#                       parameters are separated by spaces and the entire
#                       set of parameters should be quoted.  This script 
#                       accepts these as-is, and performs no check of 
#                       correctness.  The default is "-DDUMP_ALL"
#                       if missing or "".  The known optional useful parameters 
#                       are:

#                       -Pagc.RUNLENGTH=N, where N is a time in nanoseconds
#                               which overrides the total runtime of the 
#                               simulation.  The default is 1/4 second.
#                       -DSPOOF_SC, spoofs certain input signals from the 
#                               spacecraft.
#                       -DDUMP_ALL, which means that all signals are dumped to
#                               the logged simulation datafile.
#                       -DUMP_BACKPLANE, which means that all backplane signals
#                               are dumped.
#                       -DUMP_DECODER, which means to dump all of the variables
#                               used by the instruction-decoder circuitry.
#                       -DUMP_HELPFUL, which means to dump all "helpful" signals.
#                       
#                       These switches are all interpreted by the test-bench 
#                       file tb_xxxx.v where xxxx represents the AGC model 
#                       number.  At present, though, tb_xxxx.v requires that
#                       exactly one of the DUMP_xxxx options be present.

extension=sch

# Let's find out what the name of the python3 executable is:
export python_exe=python
which python3 &>/dev/null && export python_exe=python3
export PYTHONPATH="$PATH"

# Parse command line and perform sanity checks.

if [ "$1" = "" ]
then
        model=2003993
        sameAs=2003993
elif [ "$1" = 2003993 ]
then
        model=$1
        sameAs=2003993
elif [ "$1" = 2003200 ]
then
        model=$1
        sameAs=2003200
elif [ "$1" = 2003100 ]
then
        model=$1
        sameAs=2003100
        echo Model not yet supported.
        exit 1
elif [ "$1" = 1003700 ]
then
        model=$1
        sameAs=1003700
        echo Model not yet supported.
        exit 1
elif [ "$1" = 1003565 ]
then
        model=$1
        sameAs=1003700
        echo Model not yet supported.
        exit 1
else
        echo Unrecognized AGC model number.
        exit 1
fi
if [ $model = $sameAs ]
then
        echo "AGC model: $model"
else
        echo "AGC model: $model (same as $sameAs)"
fi
if [ $sameAs = 2003993 ]
then
        # Schematic drawings for logic modules A1-A24.
        modules=
        modules="$modules 2005259A"
        modules="$modules 2005260A"
        modules="$modules 2005251A"
        modules="$modules 2005262A"
        modules="$modules 2005261A"
        modules="$modules 2005263A"
        modules="$modules 2005252A"
        modules="$modules 2005255-"
        modules="$modules 2005256A"
        modules="$modules 2005257A"
        modules="$modules 2005258A"
        modules="$modules 2005253A"
        modules="$modules 2005269-"
        modules="$modules 2005264B"
        modules="$modules 2005265A"
        modules="$modules 2005266-"
        modules="$modules 2005267A"
        modules="$modules 2005268A"
        modules="$modules 2005270-"
        modules="$modules 2005254-"
        modules="$modules 2005250-"
        modules="$modules 2005271-"
        modules="$modules 2005272A"
        modules="$modules 2005273A"
fi
if [ $sameAs = 2003200 ]
then
        # Schematic drawings for logic modules A1-A24, A52.
        modules=
        modules="$modules 2005259A"
        modules="$modules 2005260A"
        modules="$modules 2005251A"
        modules="$modules 2005262A"
        modules="$modules 2005261A"
        modules="$modules 2005263A"
        modules="$modules 2005252A"
        modules="$modules 2005255-"
        modules="$modules 2005256A"
        modules="$modules 2005257A"
        modules="$modules 2005258A"
        modules="$modules 2005253A"
        modules="$modules 2005269-"
        modules="$modules 2005264A"
        modules="$modules 2005265A"
        modules="$modules 2005266-"
        modules="$modules 2005267A"
        modules="$modules 2005268A"
        modules="$modules 2005270-"
        modules="$modules 2005254-"
        modules="$modules 2005250-"
        modules="$modules 2005271-"
        modules="$modules 2005272A"
        modules="$modules 2005273A"
        module52=2003305B
fi

# Workflow Step #1:
echo Checking existence of all schematic diagrams needed ...
for d in $modules $module52
do
        if [ ! -f $d/module.$extension ]
        then
                echo Schematic $d/module.$extension does not exist
                exit 1
        fi
done

if [ "$2" = "" ]
then
        software=Validation-hardware-simulation
else
        software=$1
fi
echo AGC software: $software 
if [ ! -f roms/$software.v ]
then
        echo Selected AGC software version has no Verilog source-code file.
        exit 1
fi

# Workflow Step #2:
autonet=0
if [ $extension = kicad_sch ]
then
	if which kicad-cli &>/dev/null
	then
		autonet=1
	fi
fi
if [ $autonet = 1 ]
then
        echo Generating netlist files ...
        # kicad-cli does exist.
        for d in $modules $module52 fixed_erasable_memory
        do
                cd $d &>/dev/null
                kicad-cli sch export netlist --output module.net --format orcadpcb2 module.kicad_sch
                cd .. &>/dev/null
        done
else
echo Checking existence of netlist files ...
# kicad-cli cannot be used.  The netlist files must pre-exist.
for d in $modules $module52 fixed_erasable_memory
do
        if [ ! -f $d/module.net ]
        then
                echo Netlist $d/module.net does not exist.
                exit 1
        fi
done
fi

# Workflow Step #3:
echo Generation of flip-flop initialization file ...

n=0
rm dummy.v &>/dev/null
for d in $modules $module52 fixed_erasable_memory
do
        if [ $d = fixed_erasable_memory ]
        then
                n=99
        elif [ $n = 24 ]
        then
                n=52
        else
                n=$((n+1))
        fi
        echo Initial Verilog creation for A$n $d ...
        cd $d &>/dev/null
        rm empty.init &> /dev/null
        touch empty.init
        $python_exe -m dumbVerilog A$n module.net pins.txt 20 empty.init module.$extension >>../dummy.v
        cd - &>/dev/null
done

echo Flip-flop initilizer creation ...
$python_exe -m dumbInitialization <dummy.v

n=0
for d in $modules $module52 fixed_erasable_memory
do
        if [ $d = fixed_erasable_memory ]
        then
                n=99
        elif [ $n = 24 ]
        then
                n=52
        else
                n=$((n+1))
        fi
        echo Final Verilog creation for A$n $d ...
        cd $d &>/dev/null
        cp ../A$n.init module.init
        $python_exe -m dumbVerilog A$n module.net pins.txt 20 module.init module.$extension >module.v
        cd - &>/dev/null
done

# Workflow step #4
echo Generation of testbench object-definition file ...
cp tb-$model.v tb.v
$python_exe -m dumbTestbench <dummy.v >"$model"_tb.v

# Workflow step #5
echo Setup of erasable/fixed memory Verilog source code ...
cp roms/$software.v roms/rom.v
#cat fixed_erasable_memory/RAM.v fixed_erasable_memory/ROM.v fixed_erasable_memory/BUFFER.v >>$dummy.v

# Workflow step #6
echo Compiling Verilog source code ...
if [ "$3" = "" ]
then
        verilogOptions="-DDUMP_ALL"
else
        verilogOptions="$3"
fi
vsources=
for f in $modules $module52 fixed_erasable_memory
do
        vsources="$vsources $f/module.v"
done
iverilog $verilogOptions -o $model.vvp \
        "$model"_tb.v \
        $vsources \
        fixed_erasable_memory/RAM.v \
        fixed_erasable_memory/ROM.v \
        fixed_erasable_memory/BUFFER.v

# Workflow step #7
echo Performing simulation ...
vvp $model.vvp -fst
#mv agc.fst $model.fst

# Workflow step #8
echo Simulation-results data visualization ...
#gtkwave $model.fst
gtkwave agc.gtkw
